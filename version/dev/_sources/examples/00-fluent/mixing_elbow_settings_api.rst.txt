
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-fluent/mixing_elbow_settings_api.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_00-fluent_mixing_elbow_settings_api.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-fluent_mixing_elbow_settings_api.py:

.. _ref_mixing_elbow_settings_api_beta:

Fluent setup and solution using settings objects
------------------------------------------------
This example sets up and solves a three-dimensional turbulent fluid flow
and heat transfer problem in a mixing elbow, which is common in piping
systems in power plants and process industries. Predicting the flow field
and temperature field in the area of the mixing region is important to
designing the junction properly.

This example uses settings objects.

**Problem description**

A cold fluid at 20 deg C flows into the pipe through a large inlet. It then mixes
with a warmer fluid at 40 deg C that enters through a smaller inlet located at
the elbow. The pipe dimensions are in inches, and the fluid properties and
boundary conditions are given in SI units. Because the Reynolds number for the
flow at the larger inlet is ``50, 800``, a turbulent flow model is required.

.. GENERATED FROM PYTHON SOURCE LINES 45-49

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports, which includes downloading and importing
the geometry file.

.. GENERATED FROM PYTHON SOURCE LINES 49-61

.. code-block:: Python


    import os

    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples

    import_file_name = examples.download_file(
        "mixing_elbow.msh.h5",
        "pyfluent/mixing_elbow",
        save_path=os.getcwd(),
    )


.. GENERATED FROM PYTHON SOURCE LINES 63-67

Launch Fluent
~~~~~~~~~~~~~
Launch Fluent as a service in solver mode with double precision running on
two processors and print Fluent version.

.. GENERATED FROM PYTHON SOURCE LINES 67-75

.. code-block:: Python


    solver_session = pyfluent.launch_fluent(
        precision="double",
        processor_count=2,
        mode="solver",
    )
    print(solver_session.get_fluent_version())


.. GENERATED FROM PYTHON SOURCE LINES 76-83

Import mesh and perform mesh check
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import the mesh and perform a mesh check, which lists the minimum and maximum
x, y, and z values from the mesh in the default SI units of meters. The mesh
check also reports a number of other mesh features that are checked. Any errors
in the mesh are reported. Ensure that the minimum volume is not negative because
Fluent cannot begin a calculation when this is the case.

.. GENERATED FROM PYTHON SOURCE LINES 83-87

.. code-block:: Python


    solver_session.file.read_case(file_name=import_file_name)
    solver_session.mesh.check()


.. GENERATED FROM PYTHON SOURCE LINES 88-91

Enable heat transfer
~~~~~~~~~~~~~~~~~~~~
Enable heat transfer by activating the energy equation.

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: Python


    solver_session.setup.models.energy.enabled = True


.. GENERATED FROM PYTHON SOURCE LINES 95-98

Create material
~~~~~~~~~~~~~~~
Create a material named ``"water-liquid"``.

.. GENERATED FROM PYTHON SOURCE LINES 98-101

.. code-block:: Python


    solver_session.setup.materials.database.copy_by_name(type="fluid", name="water-liquid")


.. GENERATED FROM PYTHON SOURCE LINES 102-106

Set up cell zone conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Set up the cell zone conditions for the fluid zone (``elbow-fluid``). Set ``material``
to ``"water-liquid"``.

.. GENERATED FROM PYTHON SOURCE LINES 106-111

.. code-block:: Python


    solver_session.setup.cell_zone_conditions.fluid["elbow-fluid"].general.material = (
        "water-liquid"
    )


.. GENERATED FROM PYTHON SOURCE LINES 112-116

Set up boundary conditions for CFD analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Set up the boundary conditions for the inlets, outlet, and walls for CFD
analysis.

.. GENERATED FROM PYTHON SOURCE LINES 116-154

.. code-block:: Python


    # cold inlet (cold-inlet), Setting: Value:
    # Velocity Specification Method: Magnitude, Normal to Boundary
    # Velocity Magnitude: 0.4 [m/s]
    # Specification Method: Intensity and Hydraulic Diameter
    # Turbulent Intensity: 5 [%]
    # Hydraulic Diameter: 4 [inch]
    # Temperature: 293.15 [K]
    cold_inlet = solver_session.setup.boundary_conditions.velocity_inlet["cold-inlet"]

    cold_inlet.momentum.velocity_magnitude.value = 0.4
    cold_inlet.turbulence.turbulence_specification = "Intensity and Hydraulic Diameter"
    cold_inlet.turbulence.turbulent_intensity = 0.05
    cold_inlet.turbulence.hydraulic_diameter = "4 [in]"
    cold_inlet.thermal.temperature.value = 293.15

    # hot inlet (hot-inlet), Setting: Value:
    # Velocity Specification Method: Magnitude, Normal to Boundary
    # Velocity Magnitude: 1.2 [m/s]
    # Specification Method: Intensity and Hydraulic Diameter
    # Turbulent Intensity: 5 [%]
    # Hydraulic Diameter: 1 [inch]
    # Temperature: 313.15 [K]
    hot_inlet = solver_session.setup.boundary_conditions.velocity_inlet["hot-inlet"]

    hot_inlet.momentum.velocity_magnitude.value = 1.2
    hot_inlet.turbulence.turbulence_specification = "Intensity and Hydraulic Diameter"
    hot_inlet.turbulence.hydraulic_diameter = "1 [in]"
    hot_inlet.thermal.temperature.value = 313.15

    # pressure outlet (outlet), Setting: Value:
    # Backflow Turbulent Intensity: 5 [%]
    # Backflow Turbulent Viscosity Ratio: 4

    solver_session.setup.boundary_conditions.pressure_outlet[
        "outlet"
    ].turbulence.turbulent_viscosity_ratio = 4


.. GENERATED FROM PYTHON SOURCE LINES 155-158

Initialize flow field
~~~~~~~~~~~~~~~~~~~~~
Initialize the flow field using hybrid initialization.

.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: Python


    solver_session.solution.initialization.hybrid_initialize()


.. GENERATED FROM PYTHON SOURCE LINES 162-165

Solve for 150 iterations
~~~~~~~~~~~~~~~~~~~~~~~~
Solve for 150 iterations.

.. GENERATED FROM PYTHON SOURCE LINES 165-168

.. code-block:: Python


    solver_session.solution.run_calculation.iterate(iter_count=150)


.. GENERATED FROM PYTHON SOURCE LINES 169-174

Configure graphics picture export
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Since Fluent is being run without the GUI, we will need to export plots as
picture files. Edit the picture settings to use a custom resolution so that
the images are large enough.

.. GENERATED FROM PYTHON SOURCE LINES 174-183

.. code-block:: Python


    graphics = solver_session.results.graphics
    # use_window_resolution option not active inside containers or Ansys Lab environment
    if graphics.picture.use_window_resolution.is_active():
        graphics.picture.use_window_resolution = False

    graphics.picture.x_resolution = 1920
    graphics.picture.y_resolution = 1440


.. GENERATED FROM PYTHON SOURCE LINES 184-188

Create velocity vectors
~~~~~~~~~~~~~~~~~~~~~~~
Create and display velocity vectors on the ``symmetry-xyplane`` plane, then
export the image for inspection.

.. GENERATED FROM PYTHON SOURCE LINES 188-206

.. code-block:: Python


    graphics = solver_session.results.graphics

    graphics.vector["velocity_vector_symmetry"] = {}
    velocity_symmetry = solver_session.results.graphics.vector["velocity_vector_symmetry"]
    velocity_symmetry.print_state()
    velocity_symmetry.field = "velocity-magnitude"
    velocity_symmetry.surfaces_list = [
        "symmetry-xyplane",
    ]
    velocity_symmetry.options.scale = 4
    velocity_symmetry.style = "arrow"
    velocity_symmetry.display()

    graphics.views.restore_view(view_name="front")
    graphics.views.auto_scale()
    graphics.picture.save_picture(file_name="velocity_vector_symmetry.png")


.. GENERATED FROM PYTHON SOURCE LINES 207-210

.. image:: /_static/mixing_elbow_016.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 212-215

Compute mass flow rate
~~~~~~~~~~~~~~~~~~~~~~
Compute the mass flow rate.

.. GENERATED FROM PYTHON SOURCE LINES 215-227

.. code-block:: Python

    solver_session.solution.report_definitions.flux["mass_flow_rate"] = {}

    mass_flow_rate = solver_session.solution.report_definitions.flux["mass_flow_rate"]
    mass_flow_rate.boundaries.allowed_values()
    mass_flow_rate.boundaries = [
        "cold-inlet",
        "hot-inlet",
        "outlet",
    ]
    mass_flow_rate.print_state()
    solver_session.solution.report_definitions.compute(report_defs=["mass_flow_rate"])


.. GENERATED FROM PYTHON SOURCE LINES 228-231

Close Fluent
~~~~~~~~~~~~
Close Fluent.

.. GENERATED FROM PYTHON SOURCE LINES 231-233

.. code-block:: Python


    solver_session.exit()


.. _sphx_glr_download_examples_00-fluent_mixing_elbow_settings_api.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: mixing_elbow_settings_api.ipynb <mixing_elbow_settings_api.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: mixing_elbow_settings_api.py <mixing_elbow_settings_api.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: mixing_elbow_settings_api.zip <mixing_elbow_settings_api.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
