
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-fluent/external_compressible_flow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_00-fluent_external_compressible_flow.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-fluent_external_compressible_flow.py:

.. _ref_external_compressible_flow_settings_api:

Modeling External Compressible Flow
-----------------------------------
The purpose of this tutorial is to compute the turbulent flow past a transonic
wing at a nonzero angle of attack using the k-w SST turbulence model.

This example uses the guided workflow for watertight geometry meshing
because it is appropriate for geometries that can have no imperfections,
such as gaps and leakages.

**Workflow tasks**

The Modeling External Compressible Flow Using the Meshing Workflow guides you through these tasks:

- Creation of capsule mesh using Watertight Geometry workflow.
- Model compressible flow (using the ideal gas law for density).
- Set boundary conditions for external aerodynamics.
- Use the k-w SST turbulence model.
- Calculate a solution using the pressure-based coupled solver with global time step selected for the pseudo time method.
- Check the near-wall mesh resolution by plotting the distribution of .

**Problem description**

The problem considers the flow around a wing at an angle of attack a=3.06° and a free stream Mach
number of 0.8395 (M=0.8395). The flow is transonic, and has a shock near the mid-chord (x/c≃0.20)
on the upper (suction) side. The wing has a mean aerodynamic chord length of 0.64607 m, a span of 1.1963 m,
an aspect ratio of 3.8, and a taper ratio of 0.562.

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. image:: /_static/external_compressible_flow_011.png
  :width: 500pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 59-68

Example Setup
-------------
Before you can use the meshing workflow, you must set up the
example and initialize this workflow.

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports, which includes downloading and importing
the geometry files.

.. GENERATED FROM PYTHON SOURCE LINES 68-77

.. code-block:: Python


    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples

    wing_spaceclaim_file, wing_intermediary_file = [
        examples.download_file(CAD_file, "pyfluent/external_compressible")
        for CAD_file in ["wing.scdoc", "wing.pmdb"]
    ]


.. GENERATED FROM PYTHON SOURCE LINES 79-83

Launch Fluent
~~~~~~~~~~~~~
Launch Fluent as a service in meshing mode with double precision running on
four processors and print Fluent version.

.. GENERATED FROM PYTHON SOURCE LINES 83-91

.. code-block:: Python


    meshing = pyfluent.launch_fluent(
        precision="double",
        processor_count=4,
        mode="meshing",
    )
    print(meshing.get_fluent_version())


.. GENERATED FROM PYTHON SOURCE LINES 92-95

Initialize workflow
~~~~~~~~~~~~~~~~~~~
Initialize the watertight geometry meshing workflow.

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: Python


    meshing.workflow.InitializeWorkflow(WorkflowType="Watertight Geometry")


.. GENERATED FROM PYTHON SOURCE LINES 99-107

Watertight geometry meshing workflow
------------------------------------
The fault-tolerant meshing workflow guides you through the several tasks that
follow.

Import CAD and set length units
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import the CAD geometry and set the length units to inches.

.. GENERATED FROM PYTHON SOURCE LINES 107-117

.. code-block:: Python

    geo_import = meshing.workflow.TaskObject["Import Geometry"]
    geo_import.Arguments.set_state(
        {
            "FileName": wing_intermediary_file,
        }
    )

    meshing.upload(wing_intermediary_file)
    geo_import.Execute()


.. GENERATED FROM PYTHON SOURCE LINES 118-121

Add local sizing
~~~~~~~~~~~~~~~~
Add local sizing controls to the faceted geometry.

.. GENERATED FROM PYTHON SOURCE LINES 121-156

.. code-block:: Python

    local_sizing = meshing.workflow.TaskObject["Add Local Sizing"]
    local_sizing.Arguments.set_state(
        {
            "AddChild": "yes",
            "BOIControlName": "wing-facesize",
            "BOIFaceLabelList": ["wing_bottom", "wing_top"],
            "BOISize": 10,
        }
    )

    local_sizing.AddChildAndUpdate()

    local_sizing.Arguments.set_state(
        {
            "AddChild": "yes",
            "BOIControlName": "wing-ege-facesize",
            "BOIFaceLabelList": ["wing_edge"],
            "BOISize": 2,
        }
    )

    local_sizing.AddChildAndUpdate()

    local_sizing.Arguments.set_state(
        {
            "AddChild": "yes",
            "BOIControlName": "boi_1",
            "BOIExecution": "Body Of Influence",
            "BOIFaceLabelList": ["wing-boi"],
            "BOISize": 5,
        }
    )

    local_sizing.AddChildAndUpdate()


.. GENERATED FROM PYTHON SOURCE LINES 157-160

Generate surface mesh
~~~~~~~~~~~~~~~~~~~~~
Generate the surface mash.

.. GENERATED FROM PYTHON SOURCE LINES 160-167

.. code-block:: Python

    surface_mesh_gen = meshing.workflow.TaskObject["Generate the Surface Mesh"]
    surface_mesh_gen.Arguments.set_state(
        {"CFDSurfaceMeshControls": {"MaxSize": 1000, "MinSize": 2}}
    )

    surface_mesh_gen.Execute()


.. GENERATED FROM PYTHON SOURCE LINES 168-171

Describe geometry
~~~~~~~~~~~~~~~~~
Describe geometry and define the fluid region.

.. GENERATED FROM PYTHON SOURCE LINES 171-182

.. code-block:: Python

    describe_geo = meshing.workflow.TaskObject["Describe Geometry"]
    describe_geo.UpdateChildTasks(SetupTypeChanged=False)

    describe_geo.Arguments.set_state(
        {"SetupType": "The geometry consists of only fluid regions with no voids"}
    )

    describe_geo.UpdateChildTasks(SetupTypeChanged=True)

    describe_geo.Execute()


.. GENERATED FROM PYTHON SOURCE LINES 183-186

Update boundaries
~~~~~~~~~~~~~~~~~
Update the boundaries.

.. GENERATED FROM PYTHON SOURCE LINES 186-189

.. code-block:: Python


    meshing.workflow.TaskObject["Update Boundaries"].Execute()


.. GENERATED FROM PYTHON SOURCE LINES 190-193

Update regions
~~~~~~~~~~~~~~
Update the regions.

.. GENERATED FROM PYTHON SOURCE LINES 193-196

.. code-block:: Python


    meshing.workflow.TaskObject["Update Regions"].Execute()


.. GENERATED FROM PYTHON SOURCE LINES 197-201

Add boundary layers
~~~~~~~~~~~~~~~~~~~
Add boundary layers, which consist of setting properties for the
boundary layer mesh.

.. GENERATED FROM PYTHON SOURCE LINES 201-206

.. code-block:: Python

    add_boundary_layer = meshing.workflow.TaskObject["Add Boundary Layers"]
    add_boundary_layer.Arguments.set_state({"NumberOfLayers": 12})

    add_boundary_layer.AddChildAndUpdate()


.. GENERATED FROM PYTHON SOURCE LINES 207-211

Generate volume mesh
~~~~~~~~~~~~~~~~~~~~
Generate the volume mesh, which consists of setting properties for the
volume mesh.

.. GENERATED FROM PYTHON SOURCE LINES 211-225

.. code-block:: Python

    volume_mesh_gen = meshing.workflow.TaskObject["Generate the Volume Mesh"]
    volume_mesh_gen.Arguments.set_state(
        {
            "VolumeFill": "poly-hexcore",
            "VolumeFillControls": {"HexMaxCellLength": 512},
            "VolumeMeshPreferences": {
                "CheckSelfProximity": "yes",
                "ShowVolumeMeshPreferences": True,
            },
        }
    )

    volume_mesh_gen.Execute()


.. GENERATED FROM PYTHON SOURCE LINES 226-229

Check mesh in meshing mode
~~~~~~~~~~~~~~~~~~~~~~~~~~
Check the mesh in meshing mode.

.. GENERATED FROM PYTHON SOURCE LINES 229-232

.. code-block:: Python


    meshing.tui.mesh.check_mesh()


.. GENERATED FROM PYTHON SOURCE LINES 233-236

Save mesh file
~~~~~~~~~~~~~~
Save the mesh file (``wing.msh.h5``).

.. GENERATED FROM PYTHON SOURCE LINES 236-239

.. code-block:: Python


    meshing.meshing.File.WriteMesh(FileName="wing.msh.h5")


.. GENERATED FROM PYTHON SOURCE LINES 240-250

Solve and postprocess
---------------------
Once you have completed the watertight geometry meshing workflow, you can
solve and postprcess the results.

Switch to solution mode
~~~~~~~~~~~~~~~~~~~~~~~
Switch to solution mode. Now that a high-quality mesh has been generated
using Fluent in meshing mode, you can switch to solver mode to complete the
setup of the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 250-253

.. code-block:: Python


    solver = meshing.switch_to_solver()


.. GENERATED FROM PYTHON SOURCE LINES 254-260

Check mesh in solver mode
~~~~~~~~~~~~~~~~~~~~~~~~~
Check the mesh in solver mode. The mesh check lists the minimum and maximum
x, y, and z values from the mesh in the default SI units of meters. It also
reports a number of other mesh features that are checked. Any errors in the
mesh are reported.

.. GENERATED FROM PYTHON SOURCE LINES 260-263

.. code-block:: Python


    solver.mesh.check()


.. GENERATED FROM PYTHON SOURCE LINES 264-267

Define model
~~~~~~~~~~~~
Set the k-w sst turbulence model.

.. GENERATED FROM PYTHON SOURCE LINES 267-276

.. code-block:: Python


    # model : k-omega
    # k-omega model : sst

    viscous = solver.setup.models.viscous

    viscous.model = "k-omega"
    viscous.k_omega_model = "sst"


.. GENERATED FROM PYTHON SOURCE LINES 277-280

Define materials
~~~~~~~~~~~~~~~~
Modify the default material ``air`` to account for compressibility and variations of the thermophysical properties with temperature.

.. GENERATED FROM PYTHON SOURCE LINES 280-302

.. code-block:: Python


    # density : ideal-gas
    # viscosity : sutherland
    # viscosity method : three-coefficient-method
    # reference viscosity : 1.716e-05 [kg/(m s)]
    # reference temperature : 273.11 [K]
    # effective temperature : 110.56 [K]

    air = solver.setup.materials.fluid["air"]

    air.density.option = "ideal-gas"

    air.viscosity.option = "sutherland"

    air.viscosity.sutherland.option = "three-coefficient-method"

    air.viscosity.sutherland.reference_viscosity = 1.716e-05

    air.viscosity.sutherland.reference_temperature = 273.11

    air.viscosity.sutherland.effective_temperature = 110.56


.. GENERATED FROM PYTHON SOURCE LINES 303-306

Boundary Conditions
~~~~~~~~~~~~~~~~~~~
Set the boundary conditions for ``pressure_farfield``.

.. GENERATED FROM PYTHON SOURCE LINES 306-333

.. code-block:: Python


    # gauge pressure : 0 [Pa]
    # mach number : 0.8395
    # temperature : 255.56 [K]
    # x-component of flow direction : 0.998574
    # z-component of flow direction : 0.053382
    # turbulent intensity : 5 [%]
    # turbulent viscosity ratio : 10

    pressure_farfield = solver.setup.boundary_conditions.pressure_far_field[
        "pressure_farfield"
    ]

    pressure_farfield.momentum.gauge_pressure = 0

    pressure_farfield.momentum.mach_number = 0.8395

    pressure_farfield.thermal.temperature = 255.56

    pressure_farfield.momentum.flow_direction[0] = 0.998574

    pressure_farfield.momentum.flow_direction[2] = 0.053382

    pressure_farfield.turbulence.turbulent_intensity = 0.05

    pressure_farfield.turbulence.turbulent_viscosity_ratio = 10


.. GENERATED FROM PYTHON SOURCE LINES 334-337

Operating Conditions
~~~~~~~~~~~~~~~~~~~~
Set the operating conditions.

.. GENERATED FROM PYTHON SOURCE LINES 337-342

.. code-block:: Python


    # operating pressure : 80600 [Pa]

    solver.setup.general.operating_conditions.operating_pressure = 80600


.. GENERATED FROM PYTHON SOURCE LINES 343-346

Initialize flow field
~~~~~~~~~~~~~~~~~~~~~
Initialize the flow field using hybrid initialization.

.. GENERATED FROM PYTHON SOURCE LINES 346-349

.. code-block:: Python


    solver.solution.initialization.hybrid_initialize()


.. GENERATED FROM PYTHON SOURCE LINES 350-353

Save case file
~~~~~~~~~~~~~~
Save the case file ``external_compressible1.cas.h5``.

.. GENERATED FROM PYTHON SOURCE LINES 353-356

.. code-block:: Python


    solver.file.write(file_name="external_compressible.cas.h5", file_type="case")


.. GENERATED FROM PYTHON SOURCE LINES 357-360

Solve for 25 iterations
~~~~~~~~~~~~~~~~~~~~~~~~
Solve for 25 iterations (100 iterations is recommended, however for this example 25 is sufficient).

.. GENERATED FROM PYTHON SOURCE LINES 360-363

.. code-block:: Python


    solver.solution.run_calculation.iterate(iter_count=25)


.. GENERATED FROM PYTHON SOURCE LINES 364-367

Write final case file and data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Write the final case file and the data.

.. GENERATED FROM PYTHON SOURCE LINES 367-370

.. code-block:: Python


    solver.file.write(file_name="external_compressible1.cas.h5", file_type="case")


.. GENERATED FROM PYTHON SOURCE LINES 371-374

Close Fluent
~~~~~~~~~~~~
Close Fluent.

.. GENERATED FROM PYTHON SOURCE LINES 374-377

.. code-block:: Python


    solver.exit()



.. _sphx_glr_download_examples_00-fluent_external_compressible_flow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: external_compressible_flow.ipynb <external_compressible_flow.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: external_compressible_flow.py <external_compressible_flow.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: external_compressible_flow.zip <external_compressible_flow.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
