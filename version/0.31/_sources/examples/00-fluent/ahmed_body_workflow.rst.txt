
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-fluent/ahmed_body_workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_00-fluent_ahmed_body_workflow.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-fluent_ahmed_body_workflow.py:

.. _ahmed_body_simulation:

Ahmed Body External Aerodynamics Simulation
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 30-51

Objective
=====================================================================================

Ahmed body is a simplified car model used for studying the flow around it and to
predict the drag and lift forces. The model consists of a slanted back and a blunt
front.

In this example, PyFluent API is used to perform Ahmed Body external aerodynamics
simulation. which includes typical workflow of CFD Simulation as follows:

* Importing the geometry/CAD model.
* Meshing the geometry.
* Setting up the solver.
* Running the solver.
* Post-processing the results.



.. image:: ../../_static/ahmed_body_model.png
   :align: center
   :alt: Ahmed Body Model

.. GENERATED FROM PYTHON SOURCE LINES 54-56

Import required libraries/modules
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 56-63

.. code-block:: Python


    import platform

    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples
    from ansys.fluent.visualization import Contour, GraphicsWindow, set_config


.. GENERATED FROM PYTHON SOURCE LINES 64-66

Configure specific settings for this example
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 66-68

.. code-block:: Python

    set_config(blocking=True, set_view_on_display="isometric")


.. GENERATED FROM PYTHON SOURCE LINES 69-71

Launch Fluent session with meshing mode and print Fluent version
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: Python

    session = pyfluent.launch_fluent(mode="meshing", cleanup_on_exit=True)
    print(session.get_fluent_version())


.. GENERATED FROM PYTHON SOURCE LINES 75-77

Meshing Workflow
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 79-81

Initialize the Meshing Workflow
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 81-98

.. code-block:: Python


    workflow = session.workflow

    filenames = {
        "Windows": "ahmed_body_20_0degree_boi_half.scdoc",
        "Other": "ahmed_body_20_0degree_boi_half.scdoc.pmdb",
    }

    geometry_filename = examples.download_file(
        filenames.get(platform.system(), filenames["Other"]),
        "pyfluent/examples/Ahmed-Body-Simulation",
    )

    workflow.InitializeWorkflow(WorkflowType="Watertight Geometry")
    workflow.TaskObject["Import Geometry"].Arguments = dict(FileName=geometry_filename)
    workflow.TaskObject["Import Geometry"].Execute()


.. GENERATED FROM PYTHON SOURCE LINES 99-101

Add Local Face Sizing
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 101-141

.. code-block:: Python

    add_local_sizing = workflow.TaskObject["Add Local Sizing"]
    add_local_sizing.Arguments = dict(
        {
            "AddChild": "yes",
            "BOIControlName": "facesize_front",
            "BOIFaceLabelList": ["wall_ahmed_body_front"],
            "BOIGrowthRate": 1.15,
            "BOISize": 8,
        }
    )
    add_local_sizing.Execute()

    add_local_sizing.InsertCompoundChildTask()
    workflow.TaskObject["Add Local Sizing"].Execute()
    add_local_sizing = workflow.TaskObject["Add Local Sizing"]
    add_local_sizing.Arguments = dict(
        {
            "AddChild": "yes",
            "BOIControlName": "facesize_rear",
            "BOIFaceLabelList": ["wall_ahmed_body_rear"],
            "BOIGrowthRate": 1.15,
            "BOISize": 5,
        }
    )
    add_local_sizing.Execute()

    add_local_sizing.InsertCompoundChildTask()
    workflow.TaskObject["Add Local Sizing"].Execute()
    add_local_sizing = workflow.TaskObject["Add Local Sizing"]
    add_local_sizing.Arguments = dict(
        {
            "AddChild": "yes",
            "BOIControlName": "facesize_main",
            "BOIFaceLabelList": ["wall_ahmed_body_main"],
            "BOIGrowthRate": 1.15,
            "BOISize": 12,
        }
    )
    add_local_sizing.Execute()


.. GENERATED FROM PYTHON SOURCE LINES 142-144

Add BOI (Body of Influence) Sizing
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 144-159

.. code-block:: Python

    add_boi_sizing = workflow.TaskObject["Add Local Sizing"]
    add_boi_sizing.InsertCompoundChildTask()
    add_boi_sizing.Arguments = dict(
        {
            "AddChild": "yes",
            "BOIControlName": "boi_1",
            "BOIExecution": "Body Of Influence",
            "BOIFaceLabelList": ["ahmed_body_20_0degree_boi_half-boi"],
            "BOISize": 20,
        }
    )
    add_boi_sizing.Execute()
    add_boi_sizing.InsertCompoundChildTask()



.. GENERATED FROM PYTHON SOURCE LINES 160-162

Add Surface Mesh Sizing
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 162-181

.. code-block:: Python

    generate_surface_mesh = workflow.TaskObject["Generate the Surface Mesh"]
    generate_surface_mesh.Arguments = dict(
        {
            "CFDSurfaceMeshControls": {
                "CurvatureNormalAngle": 12,
                "GrowthRate": 1.15,
                "MaxSize": 50,
                "MinSize": 1,
                "SizeFunctions": "Curvature",
            }
        }
    )

    generate_surface_mesh.Execute()
    generate_surface_mesh.InsertNextTask(CommandName="ImproveSurfaceMesh")
    improve_surface_mesh = workflow.TaskObject["Improve Surface Mesh"]
    improve_surface_mesh.Arguments.update_dict({"FaceQualityLimit": 0.4})
    improve_surface_mesh.Execute()


.. GENERATED FROM PYTHON SOURCE LINES 182-184

Describe Geometry, Update Boundaries, Update Regions
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 184-192

.. code-block:: Python

    workflow.TaskObject["Describe Geometry"].Arguments = dict(
        CappingRequired="Yes",
        SetupType="The geometry consists of only fluid regions with no voids",
    )
    workflow.TaskObject["Describe Geometry"].Execute()
    workflow.TaskObject["Update Boundaries"].Execute()
    workflow.TaskObject["Update Regions"].Execute()


.. GENERATED FROM PYTHON SOURCE LINES 193-195

Add Boundary Layers
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 195-209

.. code-block:: Python

    add_boundary_layers = workflow.TaskObject["Add Boundary Layers"]
    add_boundary_layers.AddChildToTask()
    add_boundary_layers.InsertCompoundChildTask()
    workflow.TaskObject["smooth-transition_1"].Arguments.update_dict(
        {
            "BLControlName": "smooth-transition_1",
            "NumberOfLayers": 14,
            "Rate": 1.15,
            "TransitionRatio": 0.5,
        }
    )
    add_boundary_layers.Execute()



.. GENERATED FROM PYTHON SOURCE LINES 210-212

Generate the Volume Mesh
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 212-216

.. code-block:: Python

    generate_volume_mesh = workflow.TaskObject["Generate the Volume Mesh"]
    generate_volume_mesh.Arguments.update_dict({"VolumeFill": "poly-hexcore"})
    generate_volume_mesh.Execute()


.. GENERATED FROM PYTHON SOURCE LINES 217-219

Switch to the Solver Mode
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 219-221

.. code-block:: Python

    session = session.switch_to_solver()


.. GENERATED FROM PYTHON SOURCE LINES 222-224

Mesh Visualization
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 226-229

.. image:: ../../_static/ahmed_body_mesh_1.png
   :align: center
   :alt: Ahmed Body Mesh

.. GENERATED FROM PYTHON SOURCE LINES 231-234

.. image:: ../../_static/ahmed_body_mesh_2.png
   :align: center
   :alt: Ahmed Body Mesh

.. GENERATED FROM PYTHON SOURCE LINES 236-238

Solver Setup and Solve Workflow
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 240-242

Define Constants
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 242-246

.. code-block:: Python

    density = 1.225
    inlet_velocity = 30
    inlet_area = 0.11203202


.. GENERATED FROM PYTHON SOURCE LINES 247-249

Define Materials
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 249-254

.. code-block:: Python

    session.tui.define.materials.change_create("air", "air", "yes", "constant", density)
    session.settings.setup.models.viscous.model = "k-epsilon"
    session.settings.setup.models.viscous.k_epsilon_model = "realizable"
    session.settings.setup.models.viscous.options.curvature_correction = True


.. GENERATED FROM PYTHON SOURCE LINES 255-257

Define Boundary Conditions
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 257-265

.. code-block:: Python

    inlet = session.settings.setup.boundary_conditions.velocity_inlet["inlet"]
    inlet.turbulence.turb_intensity = 0.05
    inlet.momentum.velocity.value = inlet_velocity
    inlet.turbulence.turb_viscosity_ratio = 5

    outlet = session.settings.setup.boundary_conditions.pressure_outlet["outlet"]
    outlet.turbulence.turb_intensity = 0.05


.. GENERATED FROM PYTHON SOURCE LINES 266-268

Define Reference Values
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 268-272

.. code-block:: Python

    session.settings.setup.reference_values.area = inlet_area
    session.settings.setup.reference_values.density = density
    session.settings.setup.reference_values.velocity = inlet_velocity


.. GENERATED FROM PYTHON SOURCE LINES 273-275

Define Solver Settings
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 275-299

.. code-block:: Python

    session.tui.solve.set.p_v_coupling(24)

    session.tui.solve.set.discretization_scheme("pressure", 12)
    session.tui.solve.set.discretization_scheme("k", 1)
    session.tui.solve.set.discretization_scheme("epsilon", 1)
    session.tui.solve.initialize.set_defaults("k", 0.000001)

    session.settings.solution.monitor.residual.equations["continuity"].absolute_criteria = (
        0.0001
    )
    session.settings.solution.monitor.residual.equations["x-velocity"].absolute_criteria = (
        0.0001
    )
    session.settings.solution.monitor.residual.equations["y-velocity"].absolute_criteria = (
        0.0001
    )
    session.settings.solution.monitor.residual.equations["z-velocity"].absolute_criteria = (
        0.0001
    )
    session.settings.solution.monitor.residual.equations["k"].absolute_criteria = 0.0001
    session.settings.solution.monitor.residual.equations["epsilon"].absolute_criteria = (
        0.0001
    )


.. GENERATED FROM PYTHON SOURCE LINES 300-302

Define Report Definitions
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 302-316

.. code-block:: Python


    session.settings.solution.report_definitions.drag["cd-mon1"] = {}
    session.settings.solution.report_definitions.drag["cd-mon1"] = {
        "zones": ["wall_ahmed_body_main", "wall_ahmed_body_front", "wall_ahmed_body_rear"],
        "force_vector": [0, 0, 1],
    }
    session.parameters.output_parameters.report_definitions.create(name="parameter-1")
    session.parameters.output_parameters.report_definitions["parameter-1"] = {
        "report_definition": "cd-mon1"
    }

    session.settings.solution.monitor.report_plots.create(name="cd-mon1")
    session.settings.solution.monitor.report_plots["cd-mon1"] = {"report_defs": ["cd-mon1"]}


.. GENERATED FROM PYTHON SOURCE LINES 317-319

Initialize and Run Solver
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 319-325

.. code-block:: Python


    session.settings.solution.run_calculation.iter_count = 5
    session.settings.solution.initialization.initialization_type = "standard"
    session.settings.solution.initialization.standard_initialize()
    session.settings.solution.run_calculation.iterate(iter_count=5)


.. GENERATED FROM PYTHON SOURCE LINES 326-328

Post-Processing Workflow
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 328-344

.. code-block:: Python

    session.results.surfaces.iso_surface.create(name="xmid")
    session.results.surfaces.iso_surface["xmid"].field = "x-coordinate"
    session.results.surfaces.iso_surface["xmid"] = {"iso_values": [0]}

    contour1 = Contour(solver=session, field="velocity-magnitude", surfaces=["xmid"])
    disp1 = GraphicsWindow()
    disp1.add_graphics(contour1)
    disp1.show()

    contour2 = Contour(solver=session, surfaces=["xmid"])
    contour2.field.allowed_values
    contour2.field = "pressure-coefficient"
    disp2 = GraphicsWindow()
    disp2.add_graphics(contour2)
    disp2.show()


.. GENERATED FROM PYTHON SOURCE LINES 345-347

Simulation Results Visualization
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 349-352

.. image:: ../../_static/ahmed_body_model_velocity_mag.png
   :align: center
   :alt: Velocity Magnitude

.. GENERATED FROM PYTHON SOURCE LINES 354-355

Velocity Magnitude Contour

.. GENERATED FROM PYTHON SOURCE LINES 357-360

.. image:: ../../_static/ahmed_body_model_pressure_coeff.png
   :align: center
   :alt: Peressure Coefficient

.. GENERATED FROM PYTHON SOURCE LINES 362-363

Pressure Coefficient Contour

.. GENERATED FROM PYTHON SOURCE LINES 365-367

Save the case file
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 367-369

.. code-block:: Python

    session.settings.file.write(file_type="case-data", file_name="ahmed_body_final.cas.h5")


.. GENERATED FROM PYTHON SOURCE LINES 370-372

Close the session
=====================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 372-375

.. code-block:: Python

    session.exit()



.. GENERATED FROM PYTHON SOURCE LINES 376-381

References
=====================================================================================

[1] S.R. Ahmed, G. Ramm, Some Salient Features of the Time-Averaged Ground Vehicle
Wake,SAE-Paper 840300,1984


.. _sphx_glr_download_examples_00-fluent_ahmed_body_workflow.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: ahmed_body_workflow.ipynb <ahmed_body_workflow.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: ahmed_body_workflow.py <ahmed_body_workflow.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: ahmed_body_workflow.zip <ahmed_body_workflow.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
